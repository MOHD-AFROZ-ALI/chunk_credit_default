# Function 9.4.4 - Capital Allocation Insights (Part 1 of 2)
# Generated: 2025-06-30 18:22:32
# Component: Business Intelligence - Capital Allocation Engine
# Architecture: Chunk 9 Foundation
# 
# Description:
# Core capital allocation analysis engine implementing risk-adjusted capital allocation,
# portfolio optimization, and regulatory compliance analysis. This is the first part
# containing the foundational classes and core calculation methods.
#
# Components Included:
# - CapitalAllocationMetrics: Data structure for allocation constraints
# - RiskAdjustedAllocation: Results container for allocation analysis
# - CapitalAllocationEngine: Main engine with risk calculation methods
#
# Next: Part 2 will include portfolio optimization methods and advanced analytics
#
# ================================================================================

import logging
import numpy as np
import pandas as pd
from typing import Dict, List, Optional, Tuple, Union
from dataclasses import dataclass
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class CapitalAllocationMetrics:
    """Data structure for capital allocation metrics and constraints."""
    total_capital: float
    risk_budget: float
    sector_limits: Dict[str, float]
    position_limits: Dict[str, float]
    liquidity_requirements: float
    regulatory_constraints: Dict[str, float]
    timestamp: datetime = None

    def __post_init__(self):
        if self.timestamp is None:
            self.timestamp = datetime.now()

@dataclass
class RiskAdjustedAllocation:
    """Risk-adjusted capital allocation results."""
    allocations: Dict[str, float]
    risk_contributions: Dict[str, float]
    expected_returns: Dict[str, float]
    sharpe_ratios: Dict[str, float]
    var_contributions: Dict[str, float]
    confidence_level: float = 0.95

class CapitalAllocationEngine:
    """
    Core capital allocation analysis engine for business intelligence.

    Provides risk-adjusted capital allocation, portfolio optimization,
    and regulatory compliance analysis following Chunk 9 architecture.
    """

    def __init__(self, risk_free_rate: float = 0.02):
        """
        Initialize capital allocation engine.

        Args:
            risk_free_rate: Risk-free rate for Sharpe ratio calculations
        """
        self.risk_free_rate = risk_free_rate
        self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
        self.allocation_history: List[RiskAdjustedAllocation] = []

    def calculate_risk_adjusted_capital(
        self, 
        returns_data: pd.DataFrame,
        volatility_data: pd.DataFrame,
        correlation_matrix: pd.DataFrame,
        capital_constraints: CapitalAllocationMetrics
    ) -> RiskAdjustedAllocation:
        """
        Calculate risk-adjusted capital allocation using modern portfolio theory.

        Args:
            returns_data: Historical returns data
            volatility_data: Asset volatility measurements
            correlation_matrix: Asset correlation matrix
            capital_constraints: Capital allocation constraints and limits

        Returns:
            RiskAdjustedAllocation: Risk-adjusted allocation results
        """
        try:
            self.logger.info("Starting risk-adjusted capital calculation")

            # Calculate expected returns and covariance matrix
            expected_returns = self._calculate_expected_returns(returns_data)
            covariance_matrix = self._build_covariance_matrix(volatility_data, correlation_matrix)

            # Apply portfolio optimization
            optimal_weights = self._optimize_portfolio_weights(
                expected_returns, 
                covariance_matrix,
                capital_constraints
            )

            # Calculate risk contributions
            risk_contributions = self._calculate_risk_contributions(
                optimal_weights, 
                covariance_matrix
            )

            # Calculate performance metrics
            sharpe_ratios = self._calculate_sharpe_ratios(expected_returns, volatility_data)
            var_contributions = self._calculate_var_contributions(
                optimal_weights, 
                returns_data
            )

            # Build allocation result
            allocation_result = RiskAdjustedAllocation(
                allocations=optimal_weights,
                risk_contributions=risk_contributions,
                expected_returns=expected_returns,
                sharpe_ratios=sharpe_ratios,
                var_contributions=var_contributions
            )

            self.allocation_history.append(allocation_result)
            self.logger.info("Risk-adjusted capital calculation completed successfully")

            return allocation_result

        except Exception as e:
            self.logger.error(f"Error in risk-adjusted capital calculation: {str(e)}")
            raise

    def _calculate_expected_returns(self, returns_data: pd.DataFrame) -> Dict[str, float]:
        """Calculate expected returns using historical data."""
        return returns_data.mean().to_dict()

    def _build_covariance_matrix(
        self, 
        volatility_data: pd.DataFrame, 
        correlation_matrix: pd.DataFrame
    ) -> pd.DataFrame:
        """Build covariance matrix from volatility and correlation data."""
        vol_vector = volatility_data.values.flatten()
        return correlation_matrix * np.outer(vol_vector, vol_vector)

print("âœ… Capital Allocation Engine (Part 1) implemented successfully")
print("ðŸ“Š Core components: CapitalAllocationMetrics, RiskAdjustedAllocation, CapitalAllocationEngine")
print("ðŸ”§ Ready for Part 2: Portfolio optimization methods and advanced analytics")